///
/// NitroInput-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AutoCapitalize` to properly resolve imports.
namespace margelo::nitro::nitroinput { enum class AutoCapitalize; }
// Forward declaration of `HybridNitroTextInputViewSpec` to properly resolve imports.
namespace margelo::nitro::nitroinput { class HybridNitroTextInputViewSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroTextInputViewSpec_cxx` to properly resolve imports.
namespace NitroInput { class HybridNitroTextInputViewSpec_cxx; }

// Include C++ defined types
#include "AutoCapitalize.hpp"
#include "HybridNitroTextInputViewSpec.hpp"
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitroinput::bridge::swift {

  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) noexcept {
    return std::optional<bool>(value);
  }
  inline bool has_value_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return optional.has_value();
  }
  inline bool get_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<AutoCapitalize>
  /**
   * Specialized version of `std::optional<AutoCapitalize>`.
   */
  using std__optional_AutoCapitalize_ = std::optional<AutoCapitalize>;
  inline std::optional<AutoCapitalize> create_std__optional_AutoCapitalize_(const AutoCapitalize& value) noexcept {
    return std::optional<AutoCapitalize>(value);
  }
  inline bool has_value_std__optional_AutoCapitalize_(const std::optional<AutoCapitalize>& optional) noexcept {
    return optional.has_value();
  }
  inline AutoCapitalize get_std__optional_AutoCapitalize_(const std::optional<AutoCapitalize>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::function<void(const std::string& /* value */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* value */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * value * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* value */)>&& func): _function(std::make_unique<std::function<void(const std::string& /* value */)>>(std::move(func))) {}
    inline void call(std::string value) const noexcept {
      _function->operator()(value);
    }
  private:
    std::unique_ptr<std::function<void(const std::string& /* value */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) noexcept {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<std::function<void(const std::string& /* value */)>>
  /**
   * Specialized version of `std::optional<std::function<void(const std::string& / * value * /)>>`.
   */
  using std__optional_std__function_void_const_std__string_____value______ = std::optional<std::function<void(const std::string& /* value */)>>;
  inline std::optional<std::function<void(const std::string& /* value */)>> create_std__optional_std__function_void_const_std__string_____value______(const std::function<void(const std::string& /* value */)>& value) noexcept {
    return std::optional<std::function<void(const std::string& /* value */)>>(value);
  }
  inline bool has_value_std__optional_std__function_void_const_std__string_____value______(const std::optional<std::function<void(const std::string& /* value */)>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::function<void(const std::string& /* value */)> get_std__optional_std__function_void_const_std__string_____value______(const std::optional<std::function<void(const std::string& /* value */)>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroTextInputViewSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroTextInputViewSpec>`.
   */
  using std__shared_ptr_HybridNitroTextInputViewSpec_ = std::shared_ptr<HybridNitroTextInputViewSpec>;
  std::shared_ptr<HybridNitroTextInputViewSpec> create_std__shared_ptr_HybridNitroTextInputViewSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridNitroTextInputViewSpec_(std__shared_ptr_HybridNitroTextInputViewSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroTextInputViewSpec>
  using std__weak_ptr_HybridNitroTextInputViewSpec_ = std::weak_ptr<HybridNitroTextInputViewSpec>;
  inline std__weak_ptr_HybridNitroTextInputViewSpec_ weakify_std__shared_ptr_HybridNitroTextInputViewSpec_(const std::shared_ptr<HybridNitroTextInputViewSpec>& strong) noexcept { return strong; }

} // namespace margelo::nitro::nitroinput::bridge::swift
