///
/// JHybridNitroTextInputViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroTextInputViewSpec.hpp"

// Forward declaration of `AutoCapitalize` to properly resolve imports.
namespace margelo::nitro::nitroinput { enum class AutoCapitalize; }

#include <optional>
#include "AutoCapitalize.hpp"
#include "JAutoCapitalize.hpp"
#include <string>
#include <functional>
#include "JFunc_void_std__string.hpp"

namespace margelo::nitro::nitroinput {

  jni::local_ref<JHybridNitroTextInputViewSpec::jhybriddata> JHybridNitroTextInputViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroTextInputViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroTextInputViewSpec::initHybrid),
    });
  }

  size_t JHybridNitroTextInputViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroTextInputViewSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  std::optional<bool> JHybridNitroTextInputViewSpec::getAllowFontScaling() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getAllowFontScaling");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAllowFontScaling(std::optional<bool> allowFontScaling) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* allowFontScaling */)>("setAllowFontScaling");
    method(_javaPart, allowFontScaling.has_value() ? jni::JBoolean::valueOf(allowFontScaling.value()) : nullptr);
  }
  std::optional<AutoCapitalize> JHybridNitroTextInputViewSpec::getAutoCapitalize() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JAutoCapitalize>()>("getAutoCapitalize");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAutoCapitalize(std::optional<AutoCapitalize> autoCapitalize) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JAutoCapitalize> /* autoCapitalize */)>("setAutoCapitalize");
    method(_javaPart, autoCapitalize.has_value() ? JAutoCapitalize::fromCpp(autoCapitalize.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getAutoCorrect() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getAutoCorrect");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setAutoCorrect(std::optional<bool> autoCorrect) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* autoCorrect */)>("setAutoCorrect");
    method(_javaPart, autoCorrect.has_value() ? jni::JBoolean::valueOf(autoCorrect.value()) : nullptr);
  }
  std::optional<std::function<void(const std::string& /* value */)>> JHybridNitroTextInputViewSpec::getOnChangeText() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_std__string::javaobject>()>("getOnChangeText_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(const std::string& /* value */)> {
      if (__result->isInstanceOf(JFunc_void_std__string_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_std__string_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](std::string value) -> void {
          return __resultRef->invoke(value);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setOnChangeText(const std::optional<std::function<void(const std::string& /* value */)>>& onChangeText) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_std__string::javaobject> /* onChangeText */)>("setOnChangeText_cxx");
    method(_javaPart, onChangeText.has_value() ? JFunc_void_std__string_cxx::fromCpp(onChangeText.value()) : nullptr);
  }
  std::optional<std::string> JHybridNitroTextInputViewSpec::getValue() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getValue");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setValue(const std::optional<std::string>& value) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* value */)>("setValue");
    method(_javaPart, value.has_value() ? jni::make_jstring(value.value()) : nullptr);
  }
  std::optional<bool> JHybridNitroTextInputViewSpec::getMultiline() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getMultiline");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setMultiline(std::optional<bool> multiline) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* multiline */)>("setMultiline");
    method(_javaPart, multiline.has_value() ? jni::JBoolean::valueOf(multiline.value()) : nullptr);
  }
  std::optional<std::string> JHybridNitroTextInputViewSpec::getPlaceholder() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getPlaceholder");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroTextInputViewSpec::setPlaceholder(const std::optional<std::string>& placeholder) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* placeholder */)>("setPlaceholder");
    method(_javaPart, placeholder.has_value() ? jni::make_jstring(placeholder.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::nitroinput
